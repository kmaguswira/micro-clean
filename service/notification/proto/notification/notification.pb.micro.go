// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/notification/notification.proto

package go_micro_srv_notification

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Notification service

type NotificationService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Notification_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Notification_PingPongService, error)
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...client.CallOption) (*CreateEmailTemplateResponse, error)
	FindEmailTemplateById(ctx context.Context, in *FindEmailTemplateByIdRequest, opts ...client.CallOption) (*FindEmailTemplateByIdResponse, error)
	FindAllEmailTemplate(ctx context.Context, in *FindAllEmailTemplateRequest, opts ...client.CallOption) (*FindAllEmailTemplateResponse, error)
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...client.CallOption) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...client.CallOption) (*DeleteEmailTemplateResponse, error)
}

type notificationService struct {
	c    client.Client
	name string
}

func NewNotificationService(name string, c client.Client) NotificationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.notification"
	}
	return &notificationService{
		c:    c,
		name: name,
	}
}

func (c *notificationService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Notification.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Notification_StreamService, error) {
	req := c.c.NewRequest(c.name, "Notification.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &notificationServiceStream{stream}, nil
}

type Notification_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type notificationServiceStream struct {
	stream client.Stream
}

func (x *notificationServiceStream) Close() error {
	return x.stream.Close()
}

func (x *notificationServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationService) PingPong(ctx context.Context, opts ...client.CallOption) (Notification_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Notification.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &notificationServicePingPong{stream}, nil
}

type Notification_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type notificationServicePingPong struct {
	stream client.Stream
}

func (x *notificationServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *notificationServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *notificationServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationService) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...client.CallOption) (*CreateEmailTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.CreateEmailTemplate", in)
	out := new(CreateEmailTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) FindEmailTemplateById(ctx context.Context, in *FindEmailTemplateByIdRequest, opts ...client.CallOption) (*FindEmailTemplateByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.FindEmailTemplateById", in)
	out := new(FindEmailTemplateByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) FindAllEmailTemplate(ctx context.Context, in *FindAllEmailTemplateRequest, opts ...client.CallOption) (*FindAllEmailTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.FindAllEmailTemplate", in)
	out := new(FindAllEmailTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...client.CallOption) (*UpdateEmailTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.UpdateEmailTemplate", in)
	out := new(UpdateEmailTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationService) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...client.CallOption) (*DeleteEmailTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Notification.DeleteEmailTemplate", in)
	out := new(DeleteEmailTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notification service

type NotificationHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Notification_StreamStream) error
	PingPong(context.Context, Notification_PingPongStream) error
	CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest, *CreateEmailTemplateResponse) error
	FindEmailTemplateById(context.Context, *FindEmailTemplateByIdRequest, *FindEmailTemplateByIdResponse) error
	FindAllEmailTemplate(context.Context, *FindAllEmailTemplateRequest, *FindAllEmailTemplateResponse) error
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest, *UpdateEmailTemplateResponse) error
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest, *DeleteEmailTemplateResponse) error
}

func RegisterNotificationHandler(s server.Server, hdlr NotificationHandler, opts ...server.HandlerOption) error {
	type notification interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
		CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, out *CreateEmailTemplateResponse) error
		FindEmailTemplateById(ctx context.Context, in *FindEmailTemplateByIdRequest, out *FindEmailTemplateByIdResponse) error
		FindAllEmailTemplate(ctx context.Context, in *FindAllEmailTemplateRequest, out *FindAllEmailTemplateResponse) error
		UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, out *UpdateEmailTemplateResponse) error
		DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, out *DeleteEmailTemplateResponse) error
	}
	type Notification struct {
		notification
	}
	h := &notificationHandler{hdlr}
	return s.Handle(s.NewHandler(&Notification{h}, opts...))
}

type notificationHandler struct {
	NotificationHandler
}

func (h *notificationHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.NotificationHandler.Call(ctx, in, out)
}

func (h *notificationHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NotificationHandler.Stream(ctx, m, &notificationStreamStream{stream})
}

type Notification_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type notificationStreamStream struct {
	stream server.Stream
}

func (x *notificationStreamStream) Close() error {
	return x.stream.Close()
}

func (x *notificationStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *notificationHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.NotificationHandler.PingPong(ctx, &notificationPingPongStream{stream})
}

type Notification_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type notificationPingPongStream struct {
	stream server.Stream
}

func (x *notificationPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *notificationPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *notificationPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *notificationPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *notificationPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *notificationHandler) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, out *CreateEmailTemplateResponse) error {
	return h.NotificationHandler.CreateEmailTemplate(ctx, in, out)
}

func (h *notificationHandler) FindEmailTemplateById(ctx context.Context, in *FindEmailTemplateByIdRequest, out *FindEmailTemplateByIdResponse) error {
	return h.NotificationHandler.FindEmailTemplateById(ctx, in, out)
}

func (h *notificationHandler) FindAllEmailTemplate(ctx context.Context, in *FindAllEmailTemplateRequest, out *FindAllEmailTemplateResponse) error {
	return h.NotificationHandler.FindAllEmailTemplate(ctx, in, out)
}

func (h *notificationHandler) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, out *UpdateEmailTemplateResponse) error {
	return h.NotificationHandler.UpdateEmailTemplate(ctx, in, out)
}

func (h *notificationHandler) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, out *DeleteEmailTemplateResponse) error {
	return h.NotificationHandler.DeleteEmailTemplate(ctx, in, out)
}
