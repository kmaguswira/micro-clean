// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account/account.proto

package kmaguswira_srv_account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Account_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Account_PingPongService, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...client.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...client.CallOption) (*SignInResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	FindRoleById(ctx context.Context, in *FindRoleByIdRequest, opts ...client.CallOption) (*FindRoleByIdResponse, error)
	FindAllRole(ctx context.Context, in *FindAllRoleRequest, opts ...client.CallOption) (*FindAllRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	FindRoleByTitle(ctx context.Context, in *FindRoleByTitleRequest, opts ...client.CallOption) (*FindRoleByTitleResponse, error)
	CreateACL(ctx context.Context, in *CreateACLRequest, opts ...client.CallOption) (*CreateACLResponse, error)
	FindACLById(ctx context.Context, in *FindACLByIdRequest, opts ...client.CallOption) (*FindACLByIdResponse, error)
	FindAllACL(ctx context.Context, in *FindAllACLRequest, opts ...client.CallOption) (*FindAllACLResponse, error)
	UpdateACL(ctx context.Context, in *UpdateACLRequest, opts ...client.CallOption) (*UpdateACLResponse, error)
	DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...client.CallOption) (*DeleteACLResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...client.CallOption) (*FindUserByIdResponse, error)
	FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...client.CallOption) (*FindAllUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "kmaguswira.srv.account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Account.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Account_StreamService, error) {
	req := c.c.NewRequest(c.name, "Account.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &accountServiceStream{stream}, nil
}

type Account_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type accountServiceStream struct {
	stream client.Stream
}

func (x *accountServiceStream) Close() error {
	return x.stream.Close()
}

func (x *accountServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *accountServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *accountServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountService) PingPong(ctx context.Context, opts ...client.CallOption) (Account_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Account.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &accountServicePingPong{stream}, nil
}

type Account_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type accountServicePingPong struct {
	stream client.Stream
}

func (x *accountServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *accountServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *accountServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *accountServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *accountServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountService) SignUp(ctx context.Context, in *SignUpRequest, opts ...client.CallOption) (*SignUpResponse, error) {
	req := c.c.NewRequest(c.name, "Account.SignUp", in)
	out := new(SignUpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SignIn(ctx context.Context, in *SignInRequest, opts ...client.CallOption) (*SignInResponse, error) {
	req := c.c.NewRequest(c.name, "Account.SignIn", in)
	out := new(SignInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Account.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindRoleById(ctx context.Context, in *FindRoleByIdRequest, opts ...client.CallOption) (*FindRoleByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindRoleById", in)
	out := new(FindRoleByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindAllRole(ctx context.Context, in *FindAllRoleRequest, opts ...client.CallOption) (*FindAllRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindAllRole", in)
	out := new(FindAllRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...client.CallOption) (*UpdateRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateRole", in)
	out := new(UpdateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindRoleByTitle(ctx context.Context, in *FindRoleByTitleRequest, opts ...client.CallOption) (*FindRoleByTitleResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindRoleByTitle", in)
	out := new(FindRoleByTitleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateACL(ctx context.Context, in *CreateACLRequest, opts ...client.CallOption) (*CreateACLResponse, error) {
	req := c.c.NewRequest(c.name, "Account.CreateACL", in)
	out := new(CreateACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindACLById(ctx context.Context, in *FindACLByIdRequest, opts ...client.CallOption) (*FindACLByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindACLById", in)
	out := new(FindACLByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindAllACL(ctx context.Context, in *FindAllACLRequest, opts ...client.CallOption) (*FindAllACLResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindAllACL", in)
	out := new(FindAllACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateACL(ctx context.Context, in *UpdateACLRequest, opts ...client.CallOption) (*UpdateACLResponse, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateACL", in)
	out := new(UpdateACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...client.CallOption) (*DeleteACLResponse, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteACL", in)
	out := new(DeleteACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Account.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...client.CallOption) (*FindUserByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindUserById", in)
	out := new(FindUserByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...client.CallOption) (*FindAllUserResponse, error) {
	req := c.c.NewRequest(c.name, "Account.FindAllUser", in)
	out := new(FindAllUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Account_StreamStream) error
	PingPong(context.Context, Account_PingPongStream) error
	SignUp(context.Context, *SignUpRequest, *SignUpResponse) error
	SignIn(context.Context, *SignInRequest, *SignInResponse) error
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	FindRoleById(context.Context, *FindRoleByIdRequest, *FindRoleByIdResponse) error
	FindAllRole(context.Context, *FindAllRoleRequest, *FindAllRoleResponse) error
	UpdateRole(context.Context, *UpdateRoleRequest, *UpdateRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	FindRoleByTitle(context.Context, *FindRoleByTitleRequest, *FindRoleByTitleResponse) error
	CreateACL(context.Context, *CreateACLRequest, *CreateACLResponse) error
	FindACLById(context.Context, *FindACLByIdRequest, *FindACLByIdResponse) error
	FindAllACL(context.Context, *FindAllACLRequest, *FindAllACLResponse) error
	UpdateACL(context.Context, *UpdateACLRequest, *UpdateACLResponse) error
	DeleteACL(context.Context, *DeleteACLRequest, *DeleteACLResponse) error
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	FindUserById(context.Context, *FindUserByIdRequest, *FindUserByIdResponse) error
	FindAllUser(context.Context, *FindAllUserRequest, *FindAllUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
		SignUp(ctx context.Context, in *SignUpRequest, out *SignUpResponse) error
		SignIn(ctx context.Context, in *SignInRequest, out *SignInResponse) error
		CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error
		FindRoleById(ctx context.Context, in *FindRoleByIdRequest, out *FindRoleByIdResponse) error
		FindAllRole(ctx context.Context, in *FindAllRoleRequest, out *FindAllRoleResponse) error
		UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		FindRoleByTitle(ctx context.Context, in *FindRoleByTitleRequest, out *FindRoleByTitleResponse) error
		CreateACL(ctx context.Context, in *CreateACLRequest, out *CreateACLResponse) error
		FindACLById(ctx context.Context, in *FindACLByIdRequest, out *FindACLByIdResponse) error
		FindAllACL(ctx context.Context, in *FindAllACLRequest, out *FindAllACLResponse) error
		UpdateACL(ctx context.Context, in *UpdateACLRequest, out *UpdateACLResponse) error
		DeleteACL(ctx context.Context, in *DeleteACLRequest, out *DeleteACLResponse) error
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		FindUserById(ctx context.Context, in *FindUserByIdRequest, out *FindUserByIdResponse) error
		FindAllUser(ctx context.Context, in *FindAllUserRequest, out *FindAllUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.AccountHandler.Call(ctx, in, out)
}

func (h *accountHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AccountHandler.Stream(ctx, m, &accountStreamStream{stream})
}

type Account_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type accountStreamStream struct {
	stream server.Stream
}

func (x *accountStreamStream) Close() error {
	return x.stream.Close()
}

func (x *accountStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *accountStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *accountStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *accountHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.AccountHandler.PingPong(ctx, &accountPingPongStream{stream})
}

type Account_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type accountPingPongStream struct {
	stream server.Stream
}

func (x *accountPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *accountPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *accountPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *accountPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *accountPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *accountHandler) SignUp(ctx context.Context, in *SignUpRequest, out *SignUpResponse) error {
	return h.AccountHandler.SignUp(ctx, in, out)
}

func (h *accountHandler) SignIn(ctx context.Context, in *SignInRequest, out *SignInResponse) error {
	return h.AccountHandler.SignIn(ctx, in, out)
}

func (h *accountHandler) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.AccountHandler.CreateRole(ctx, in, out)
}

func (h *accountHandler) FindRoleById(ctx context.Context, in *FindRoleByIdRequest, out *FindRoleByIdResponse) error {
	return h.AccountHandler.FindRoleById(ctx, in, out)
}

func (h *accountHandler) FindAllRole(ctx context.Context, in *FindAllRoleRequest, out *FindAllRoleResponse) error {
	return h.AccountHandler.FindAllRole(ctx, in, out)
}

func (h *accountHandler) UpdateRole(ctx context.Context, in *UpdateRoleRequest, out *UpdateRoleResponse) error {
	return h.AccountHandler.UpdateRole(ctx, in, out)
}

func (h *accountHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.AccountHandler.DeleteRole(ctx, in, out)
}

func (h *accountHandler) FindRoleByTitle(ctx context.Context, in *FindRoleByTitleRequest, out *FindRoleByTitleResponse) error {
	return h.AccountHandler.FindRoleByTitle(ctx, in, out)
}

func (h *accountHandler) CreateACL(ctx context.Context, in *CreateACLRequest, out *CreateACLResponse) error {
	return h.AccountHandler.CreateACL(ctx, in, out)
}

func (h *accountHandler) FindACLById(ctx context.Context, in *FindACLByIdRequest, out *FindACLByIdResponse) error {
	return h.AccountHandler.FindACLById(ctx, in, out)
}

func (h *accountHandler) FindAllACL(ctx context.Context, in *FindAllACLRequest, out *FindAllACLResponse) error {
	return h.AccountHandler.FindAllACL(ctx, in, out)
}

func (h *accountHandler) UpdateACL(ctx context.Context, in *UpdateACLRequest, out *UpdateACLResponse) error {
	return h.AccountHandler.UpdateACL(ctx, in, out)
}

func (h *accountHandler) DeleteACL(ctx context.Context, in *DeleteACLRequest, out *DeleteACLResponse) error {
	return h.AccountHandler.DeleteACL(ctx, in, out)
}

func (h *accountHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AccountHandler.CreateUser(ctx, in, out)
}

func (h *accountHandler) FindUserById(ctx context.Context, in *FindUserByIdRequest, out *FindUserByIdResponse) error {
	return h.AccountHandler.FindUserById(ctx, in, out)
}

func (h *accountHandler) FindAllUser(ctx context.Context, in *FindAllUserRequest, out *FindAllUserResponse) error {
	return h.AccountHandler.FindAllUser(ctx, in, out)
}

func (h *accountHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.AccountHandler.UpdateUser(ctx, in, out)
}

func (h *accountHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.AccountHandler.DeleteUser(ctx, in, out)
}
